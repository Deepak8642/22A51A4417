{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create a short URL\nconst createShortUrl = async ({\n  url,\n  validity,\n  shortcode\n}) => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/shorten`, {\n      originalUrl: url,\n      validity,\n      shortcode\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to create short URL');\n  }\n};\n\n// Fetch all statistics\nconst fetchAllStatistics = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/statistics`);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch statistics');\n  }\n};\n\n// Fetch statistics for a single short URL\nconst getShortUrlStatistics = async shortLink => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/statistics/${shortLink}`);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch short URL statistics');\n  }\n};\n\n// Assign object to a variable before exporting\nconst api = {\n  createShortUrl,\n  fetchAllStatistics,\n  getShortUrlStatistics\n};\n\n// Export default api object\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","createShortUrl","url","validity","shortcode","response","post","originalUrl","data","error","_error$response","_error$response$data","Error","message","fetchAllStatistics","get","_error$response2","_error$response2$data","getShortUrlStatistics","shortLink","_error$response3","_error$response3$data","api"],"sources":["C:/Users/deepa/OneDrive/AppData/Desktop/affordmed/url-shortener-project/frontend/src/utils/api.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create a short URL\nconst createShortUrl = async ({ url, validity, shortcode }) => {\n    try {\n        const response = await axios.post(`${API_BASE_URL}/shorten`, {\n            originalUrl: url,\n            validity,\n            shortcode\n        });\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.message || 'Failed to create short URL');\n    }\n};\n\n// Fetch all statistics\nconst fetchAllStatistics = async () => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/statistics`);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.message || 'Failed to fetch statistics');\n    }\n};\n\n// Fetch statistics for a single short URL\nconst getShortUrlStatistics = async (shortLink) => {\n    try {\n        const response = await axios.get(`${API_BASE_URL}/statistics/${shortLink}`);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.message || 'Failed to fetch short URL statistics');\n    }\n};\n\n// Assign object to a variable before exporting\nconst api = {\n    createShortUrl,\n    fetchAllStatistics,\n    getShortUrlStatistics\n};\n\n// Export default api object\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,cAAc,GAAG,MAAAA,CAAO;EAAEC,GAAG;EAAEC,QAAQ;EAAEC;AAAU,CAAC,KAAK;EAC3D,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAGN,YAAY,UAAU,EAAE;MACzDO,WAAW,EAAEL,GAAG;MAChBC,QAAQ;MACRC;IACJ,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IACZ,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACJ,QAAQ,cAAAK,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,4BAA4B,CAAC;EAClF;AACJ,CAAC;;AAED;AACA,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACA,MAAMT,QAAQ,GAAG,MAAMN,KAAK,CAACgB,GAAG,CAAC,GAAGf,YAAY,aAAa,CAAC;IAC9D,OAAOK,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAO,gBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIL,KAAK,CAAC,EAAAI,gBAAA,GAAAP,KAAK,CAACJ,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBR,IAAI,cAAAS,qBAAA,uBAApBA,qBAAA,CAAsBJ,OAAO,KAAI,4BAA4B,CAAC;EAClF;AACJ,CAAC;;AAED;AACA,MAAMK,qBAAqB,GAAG,MAAOC,SAAS,IAAK;EAC/C,IAAI;IACA,MAAMd,QAAQ,GAAG,MAAMN,KAAK,CAACgB,GAAG,CAAC,GAAGf,YAAY,eAAemB,SAAS,EAAE,CAAC;IAC3E,OAAOd,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAW,gBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIT,KAAK,CAAC,EAAAQ,gBAAA,GAAAX,KAAK,CAACJ,QAAQ,cAAAe,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBZ,IAAI,cAAAa,qBAAA,uBAApBA,qBAAA,CAAsBR,OAAO,KAAI,sCAAsC,CAAC;EAC5F;AACJ,CAAC;;AAED;AACA,MAAMS,GAAG,GAAG;EACRrB,cAAc;EACda,kBAAkB;EAClBI;AACJ,CAAC;;AAED;AACA,eAAeI,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}